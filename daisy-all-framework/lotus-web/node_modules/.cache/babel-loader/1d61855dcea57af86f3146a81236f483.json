{"remainingRequest":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/thread-loader/dist/cjs.js!/Users/hq_ly/mhjy/mhjy_manager/node_modules/babel-loader/lib/index.js!/Users/hq_ly/mhjy/mhjy_manager/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hq_ly/mhjy/mhjy_manager/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hq_ly/mhjy/mhjy_manager/src/views/permission/page.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hq_ly/mhjy/mhjy_manager/src/views/permission/page.vue","mtime":1660376339949},{"path":"/Users/hq_ly/mhjy/mhjy_manager/babel.config.js","mtime":1657164828372},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}