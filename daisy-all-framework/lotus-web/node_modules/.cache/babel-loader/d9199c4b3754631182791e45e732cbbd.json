{"remainingRequest":"/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/thread-loader/dist/cjs.js!/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/babel-loader/lib/index.js!/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/src/views/papercenter/page.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/src/views/papercenter/page.vue","mtime":1661310722000},{"path":"/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/babel.config.js","mtime":1657164828000},{"path":"/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hongqi/Documents/jpeony/daisy-framework/daisy-all-framework/mhjy_manager/node_modules/vue-loader/lib/index.js","mtime":1655715098000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}