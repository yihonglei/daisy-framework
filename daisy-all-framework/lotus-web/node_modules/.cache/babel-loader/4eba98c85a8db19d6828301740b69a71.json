{"remainingRequest":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/thread-loader/dist/cjs.js!/Users/hq_ly/mhjy/mhjy_manager/node_modules/babel-loader/lib/index.js!/Users/hq_ly/mhjy/mhjy_manager/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hq_ly/mhjy/mhjy_manager/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hq_ly/mhjy/mhjy_manager/src/views/permission/directive.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hq_ly/mhjy/mhjy_manager/src/views/permission/directive.vue","mtime":1662348535184},{"path":"/Users/hq_ly/mhjy/mhjy_manager/babel.config.js","mtime":1657164828372},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_ly/mhjy/mhjy_manager/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9ocV9seS9taGp5L21oanlfbWFuYWdlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gIi9Vc2Vycy9ocV9seS9taGp5L21oanlfbWFuYWdlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcmVnZW5lcmF0b3JSdW50aW1lLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9ocV9seS9taGp5L21oanlfbWFuYWdlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgcGF0aCBmcm9tICdwYXRoJzsKaW1wb3J0IHsgZGVlcENsb25lIH0gZnJvbSAnQC91dGlscyc7CmltcG9ydCB7IGdldFRva2VuLCBzZXRUb2tlbiwgcmVtb3ZlVG9rZW4gfSBmcm9tICdAL3V0aWxzL2F1dGgnOwppbXBvcnQgY2hlY2tQZXJtaXNzaW9uIGZyb20gJ0AvdXRpbHMvcGVybWlzc2lvbic7IC8vIOadg+mZkOWIpOaWreWHveaVsAoKaW1wb3J0IHsgY2xpZW50LCBnZXRGaWxlTmFtZVVVSUQgfSBmcm9tICdAL3V0aWxzL2FsaW9zcy5qcyc7CnZhciBkZWZhdWx0VXNlciA9IHsKICBpZDogMCwKICB1c2VybmFtZTogJycsCiAgYXZhdGFyOiAnJywKICBuYW1lOiAnJywKICBwaG9uZTogJycsCiAgYWxpcGF5OiAnJywKICByb2xlSWRzOiAnJywKICByb2xlc0RhdGE6IFtdCn07CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdXNlcjogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFVzZXIpLAogICAgICByb2xlczogW10sCiAgICAgIHVzZXJzTGlzdDogW10sCiAgICAgIGRhdGFPYmo6IHsKICAgICAgICB0b2tlbjogJycsCiAgICAgICAga2V5OiAnJwogICAgICB9LAogICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSwKICAgICAgZGlhbG9nVHlwZTogJ25ldycsCiAgICAgIGNoZWNrU3RyaWN0bHk6IGZhbHNlLAogICAgICBkZWZhdWx0UHJvcHM6IHsKICAgICAgICBsYWJlbDogJ3RpdGxlJywKICAgICAgICB0aXRsZTogJ3RpdGxlJywKICAgICAgICBpZDogMAogICAgICB9CiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHJvbGVzRGF0YTogZnVuY3Rpb24gcm9sZXNEYXRhKCkgewogICAgICByZXR1cm4gdGhpcy5yb2xlczsKICAgIH0KICB9LAogIGZpbHRlcnM6IHsKICAgIGZpbHRlclN0YXR1czogZnVuY3Rpb24gZmlsdGVyU3RhdHVzKHN0YXR1cykgewogICAgICBpZiAoc3RhdHVzID09IDEpIHsKICAgICAgICByZXR1cm4gIuato+W4uCI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICLnpoHnlKgiOwogICAgICB9CiAgICB9LAogICAgZmlsdGVyUm9sZXM6IGZ1bmN0aW9uIGZpbHRlclJvbGVzKHJvbGVzKSB7CiAgICAgIHZhciB0bXBSb2xlcyA9IFtdOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb2xlcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciByb2xlID0gcm9sZXNbaV07CiAgICAgICAgdG1wUm9sZXMucHVzaChyb2xlLm5hbWUpOwogICAgICB9CgogICAgICByZXR1cm4gdG1wUm9sZXMuam9pbignLCcpOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIC8vIE1vY2s6IGdldCBhbGwgcm91dGVzIGFuZCByb2xlcyBsaXN0IGZyb20gc2VydmVyCiAgICB0aGlzLmdldFJvbGVzKCk7CiAgICB0aGlzLmdldFN5c1VzZXJzTGlzdCgpOwogIH0sCiAgbWV0aG9kczogewogICAgY2hlY2tQZXJtaXNzaW9uOiBjaGVja1Blcm1pc3Npb24sCiAgICBnZXRSb2xlczogZnVuY3Rpb24gZ2V0Um9sZXMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciByZXMsIHJvbGVzOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFwaS5yb2xlKCkuZ2V0Um9sZXMoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHJvbGVzID0gcmVzLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpcy5yb2xlcyA9IF90aGlzLmdlbmVyYXRlUm9sZXMocm9sZXMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0U3lzVXNlcnNMaXN0OiBmdW5jdGlvbiBnZXRTeXNVc2Vyc0xpc3QoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIHJlczsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5hcGkudXNlcigpLmdldFN5c1VzZXJzTGlzdCh7CiAgICAgICAgICAgICAgICAgIHRva2VuOiBnZXRUb2tlbigpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBfdGhpczIudXNlcnNMaXN0ID0gcmVzLmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIFJlc2hhcGUgdGhlIHJvdXRlcyBzdHJ1Y3R1cmUgc28gdGhhdCBpdCBsb29rcyB0aGUgc2FtZSBhcyB0aGUgc2lkZWJhcgogICAgZ2VuZXJhdGVSb2xlczogZnVuY3Rpb24gZ2VuZXJhdGVSb2xlcyhyb2xlcykgewogICAgICB2YXIgcmVzID0gW107CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocm9sZXMpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgcm9sZSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICAgIHRpdGxlOiByb2xlLm5hbWUsCiAgICAgICAgICAgIGxhYmVsOiByb2xlLm5hbWUsCiAgICAgICAgICAgIGlkOiByb2xlLmlkCiAgICAgICAgICB9OwogICAgICAgICAgcmVzLnB1c2goZGF0YSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXM7CiAgICB9LAogICAgZ2VuZXJhdGVBcnI6IGZ1bmN0aW9uIGdlbmVyYXRlQXJyKHJvbGVzKSB7CiAgICAgIHZhciBkYXRhID0gW107CiAgICAgIHJvbGVzLmZvckVhY2goZnVuY3Rpb24gKHJvbGUpIHsKICAgICAgICBkYXRhLnB1c2gocm9sZSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gZGF0YTsKICAgIH0sCiAgICBoYW5kbGVBZGRVc2VyOiBmdW5jdGlvbiBoYW5kbGVBZGRVc2VyKCkgewogICAgICB0aGlzLnVzZXIgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0VXNlcik7CgogICAgICBpZiAodGhpcy4kcmVmcy50cmVlKSB7CiAgICAgICAgdGhpcy4kcmVmcy50cmVlLnNldENoZWNrZWROb2RlcyhbXSk7CiAgICAgIH0KCiAgICAgIHRoaXMuZGlhbG9nVHlwZSA9ICduZXcnOwogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlOwogICAgfSwKICAgIGhhbmRsZUVkaXQ6IGZ1bmN0aW9uIGhhbmRsZUVkaXQoc2NvcGUpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLmRpYWxvZ1R5cGUgPSAnZWRpdCc7CiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWU7CiAgICAgIHRoaXMuY2hlY2tTdHJpY3RseSA9IHRydWU7CiAgICAgIHRoaXMudXNlciA9IGRlZXBDbG9uZShzY29wZS5yb3cpOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHJvbGVzID0gX3RoaXMzLmdlbmVyYXRlUm9sZXMoX3RoaXMzLnJvbGVzRGF0YSk7CgogICAgICAgIF90aGlzMy4kcmVmcy50cmVlLnNldENoZWNrZWROb2RlcyhfdGhpczMuZ2VuZXJhdGVBcnIoX3RoaXMzLnVzZXIucm9sZXMpKTsgLy8gc2V0IGNoZWNrZWQgc3RhdGUgb2YgYSBub2RlIG5vdCBhZmZlY3RzIGl0cyBmYXRoZXIgYW5kIGNoaWxkIG5vZGVzCgoKICAgICAgICBfdGhpczMuY2hlY2tTdHJpY3RseSA9IGZhbHNlOwogICAgICB9KTsKICAgIH0sCiAgICBoYW5kbGVEZWxldGU6IGZ1bmN0aW9uIGhhbmRsZURlbGV0ZShfcmVmKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyICRpbmRleCA9IF9yZWYuJGluZGV4LAogICAgICAgICAgcm93ID0gX3JlZi5yb3c7CgogICAgICBpZiAocm93LmlkID09IDEpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJywKICAgICAgICAgIG1lc3NhZ2U6ICfotoXnuqfnrqHnkIblkZjml6Dms5XliKDpmaQhJwogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy4kY29uZmlybSgn56Gu5a6a5Yig6Zmk5q2k55So5oi3PycsICfmj5DnpLonLCB7CiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7orqQnLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLAogICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICB9KS50aGVuKCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5hcGkudXNlcigpLmRlbFN5c1VzZXIoewogICAgICAgICAgICAgICAgICAnaWQnOiByb3cuaWQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfdGhpczQudXNlcnNMaXN0LnNwbGljZSgkaW5kZXgsIDEpOwoKICAgICAgICAgICAgICAgIF90aGlzNC4kbWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJywKICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+WIoOmZpOaIkOWKnyEnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgICB9KTsKICAgIH0sCiAgICBoYW5kbGVSZXNldFBXRDogZnVuY3Rpb24gaGFuZGxlUmVzZXRQV0QoX3JlZjMpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB2YXIgJGluZGV4ID0gX3JlZjMuJGluZGV4LAogICAgICAgICAgcm93ID0gX3JlZjMucm93OwoKICAgICAgaWYgKHJvdy5pZCA9PSAxKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAnd2FybmluZycsCiAgICAgICAgICBtZXNzYWdlOiAn6LaF57qn566h55CG5ZGY5peg5rOV6YeN572uIScKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuJGNvbmZpcm0oJ+ehruWumumHjee9ruatpOeUqOaIt+WvhueggT8nLCAn5o+Q56S6JywgewogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu6K6kJywKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJywKICAgICAgICB0eXBlOiAnd2FybmluZycKICAgICAgfSkudGhlbiggLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIF95aWVsZCRfdGhpczUkYXBpJHVzZSwgZGF0YTsKCiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczUuYXBpLnVzZXIoKS5yZXNldFN5c1BXRCh7CiAgICAgICAgICAgICAgICAgICdpZCc6IHJvdy5pZAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczUkYXBpJHVzZSA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF95aWVsZCRfdGhpczUkYXBpJHVzZS5kYXRhOwoKICAgICAgICAgICAgICAgIGlmIChkYXRhID09IDEpIHsKICAgICAgICAgICAgICAgICAgX3RoaXM1LiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+WvhueggemHjee9ruaIkOWKnyEnCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgX3RoaXM1LiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZmFpbCcsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+WvhueggemHjee9ruWksei0pSEnCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSkpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgIH0pOwogICAgfSwKICAgIGNvbmZpcm11c2VyOiBmdW5jdGlvbiBjb25maXJtdXNlcigpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgaXNFZGl0LCBjaGVja2VkS2V5cywgX3lpZWxkJF90aGlzNiRhcGkkdXNlLCBkYXRhLCBpbmRleCwgX3lpZWxkJF90aGlzNiRhcGkkdXNlMiwgX2RhdGEsIF90aGlzNiR1c2VyLCBpZCwgdXNlcm5hbWUsIG5hbWU7CgogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpc0VkaXQgPSBfdGhpczYuZGlhbG9nVHlwZSA9PT0gJ2VkaXQnOwogICAgICAgICAgICAgICAgY2hlY2tlZEtleXMgPSBfdGhpczYuJHJlZnMudHJlZS5nZXRDaGVja2VkS2V5cygpOwogICAgICAgICAgICAgICAgX3RoaXM2LnVzZXIucm9sZUlkcyA9IGNoZWNrZWRLZXlzLmpvaW4oJywnKTsKCiAgICAgICAgICAgICAgICBpZiAoIWlzRWRpdCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM2LmFwaS51c2VyKCkudXBkYXRlU3lzVXNlcihfdGhpczYudXNlcik7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczYkYXBpJHVzZSA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF95aWVsZCRfdGhpczYkYXBpJHVzZS5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXM2LnVzZXIucm9sZXMgPSBkYXRhLnJvbGVzOwogICAgICAgICAgICAgICAgaW5kZXggPSAwOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgaWYgKCEoaW5kZXggPCBfdGhpczYudXNlcnNMaXN0Lmxlbmd0aCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCEoX3RoaXM2LnVzZXJzTGlzdFtpbmRleF0uaWQgPT09IF90aGlzNi51c2VyLmlkKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpczYudXNlcnNMaXN0LnNwbGljZShpbmRleCwgMSwgT2JqZWN0LmFzc2lnbih7fSwgX3RoaXM2LnVzZXIpKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgiYnJlYWsiLCAxNyk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBpbmRleCsrOwogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczYuYXBpLnVzZXIoKS5hZGRTeXNVc2VyKF90aGlzNi51c2VyKTsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczYkYXBpJHVzZTIgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICAgIF9kYXRhID0gX3lpZWxkJF90aGlzNiRhcGkkdXNlMi5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXM2LnVzZXIgPSBfZGF0YTsKCiAgICAgICAgICAgICAgICBfdGhpczYudXNlcnNMaXN0LnB1c2goX3RoaXM2LnVzZXIpOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgICAgX3RoaXM2JHVzZXIgPSBfdGhpczYudXNlciwgaWQgPSBfdGhpczYkdXNlci5pZCwgdXNlcm5hbWUgPSBfdGhpczYkdXNlci51c2VybmFtZSwgbmFtZSA9IF90aGlzNiR1c2VyLm5hbWU7CiAgICAgICAgICAgICAgICBfdGhpczYuZGlhbG9nVmlzaWJsZSA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIF90aGlzNi4kbm90aWZ5KHsKICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzJywKICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nOiB0cnVlLAogICAgICAgICAgICAgICAgICBtZXNzYWdlOiAiXG4gICAgICAgICAgPGRpdj5cdTc1MjhcdTYyMzdJRDogIi5jb25jYXQoaWQsICI8L2Rpdj5cbiAgICAgICAgICA8ZGl2Plx1NzUyOFx1NjIzN1x1NTQwRDogIikuY29uY2F0KHVzZXJuYW1lLCAiPC9kaXY+XG4gICAgICAgICAgPGRpdj5cdTc3MUZcdTVCOUVcdTU5RDNcdTU0MEQ6ICIpLmNvbmNhdChuYW1lLCAiPC9kaXY+XG4gICAgICAgICIpLAogICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc3dpdGNoQ2hhbmdlOiBmdW5jdGlvbiBzd2l0Y2hDaGFuZ2Uob2JqKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIHJlczsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNy5hcGkudXNlcigpLnN5c1VwZGF0ZVVzZXJTdGF0dXMob2JqKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ2LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKHJlcy5jb2RlID09IDEpIHsKICAgICAgICAgICAgICAgICAgX3RoaXM3LiRtZXNzYWdlLnN1Y2Nlc3MoJ+aTjeS9nOaIkOWKnycpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgaWYgKG9iai5zdGF0dXMgPT0gMSkgewogICAgICAgICAgICAgICAgICAgIG9iai5zdGF0dXMgPSAwOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9iai5zdGF0dXMgPSAxOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBfdGhpczcuJG1lc3NhZ2UuZXJyb3IoJ+aTjeS9nOWksei0pScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBiZWZvcmVVcGxvYWQ6IGZ1bmN0aW9uIGJlZm9yZVVwbG9hZChmaWxlKSB7CiAgICAgIHZhciBpc0x0MU0gPSBmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCA8IDE7CgogICAgICBpZiAoIWlzTHQxTSkgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+aWh+S7tuWkp+Wwj+S4jeiDvei2hei/hyAxTSAhJyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpc0x0MU07CiAgICB9LAogICAgaHR0cFJlcXVlc3Q6IGZ1bmN0aW9uIGh0dHBSZXF1ZXN0KF9yZWY1KSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgdmFyIGZpbGUgPSBfcmVmNS5maWxlOwogICAgICB2YXIgdGhhdCA9IHRoaXM7IC8v5rOo5oSP5ZOm77yM6L+Z6YeM5oyH5a6a5paH5Lu25aS5J2ltYWdlLyfvvIzlsJ3or5Xov4flhpnlnKjphY3nva7mlofku7bvvIzkvYbmmK/lkITnp43kuI3ooYzvvIzlhpnlnKjov5nph4zlsLHlj6/ku6UKCiAgICAgIHZhciBmaWxlTmFtZSA9ICdtaGp5LycgKyAnaGVhZGVyJyArIGdldEZpbGVOYW1lVVVJRCgpICsgJy5qcGcnOwogICAgICBjbGllbnQoKS5wdXQoZmlsZU5hbWUsIGZpbGUpLnRoZW4oZnVuY3Rpb24gKF9yZWY2KSB7CiAgICAgICAgdmFyIHJlcyA9IF9yZWY2LnJlcywKICAgICAgICAgICAgdXJsID0gX3JlZjYudXJsLAogICAgICAgICAgICBuYW1lID0gX3JlZjYubmFtZTsKCiAgICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgLy8gY29uc29sZS5sb2coYOmYv+mHjOS6kU9TU+S4iuS8oOaWh+S7tuaIkOWKn+Wbnuiwg2AsIHJlcywgdXJsLCBuYW1lKTsKICAgICAgICAgIF90aGlzOC51c2VyLmF2YXRhciA9IHVybDsKICAgICAgICAgIGNvbnNvbGUubG9nKHVybCk7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgY29uc29sZS5sb2coIlx1OTYzRlx1OTFDQ1x1NEU5MU9TU1x1NEUwQVx1NEYyMFx1NTkzMVx1OEQyNVx1NTZERVx1OEMwMyIsIGVycik7CiAgICAgIH0pOwogICAgfQogIH0KfTs="},null]}